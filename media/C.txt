Absolutely! Here are examples for each of these projects:

Here's a simple example of a Number Guessing Game in C where the computer randomly selects a number,
 and the user tries to guess it:


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int number, guess, attempts = 0;
    srand(time(0)); // Seed the random number generator with the current time
    number = rand() % 100 + 1; // Generate a random number between 1 and 100

    printf("Welcome to the Number Guessing Game!\n");
    printf("I have selected a number between 1 and 100. Try to guess it!\n");

    // Loop until the user guesses the correct number
    do {
        printf("Enter your guess: ");
        scanf("%d", &guess);
        attempts++;

        if (guess > number) {
            printf("Too high! Try again.\n");
        } else if (guess < number) {
            printf("Too low! Try again.\n");
        } else {
            printf("Congratulations! You guessed the correct number in %d attempts.\n", attempts);
        }
    } while (guess != number);

    return 0;
}


### Explanation:

1. **Headers and Initialization:**
   - `#include <stdio.h>`: Includes the standard input-output library.
   - `#include <stdlib.h>`: Includes the standard library for random number generation.
   - `#include <time.h>`: Includes the time library for seeding the random number generator.

2. **Main Function:**
   - `int number, guess, attempts = 0;`: Declares variables to store the randomly generated number, user's guess, and the number of attempts.
   - `srand(time(0));`: Seeds the random number generator with the current time to ensure different random numbers each time the program runs.
   - `number = rand() % 100 + 1;`: Generates a random number between 1 and 100.

3. **Game Loop:**
   - The loop continues until the user guesses the correct number.
   - Inside the loop, the program prompts the user to enter their guess.
   - `scanf("%d", &guess);`: Reads the user's guess.
   - The program checks if the guess is too high, too low, or correct, and provides feedback accordingly.
   - If the guess is correct, the program congratulates the user and displays the number of attempts taken.


### . Temperature Converter

This program will convert temperatures between Fahrenheit and Celsius using functions.

```c
#include <stdio.h>

// Function prototypes
float celsiusToFahrenheit(float celsius);
float fahrenheitToCelsius(float fahrenheit);

int main() {
    float temp;
    int choice;

    printf("Temperature Converter\n");
    printf("1. Celsius to Fahrenheit\n");
    printf("2. Fahrenheit to Celsius\n");
    printf("Choose an option: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter temperature in Celsius: ");
        scanf("%f", &temp);
        printf("Temperature in Fahrenheit: %.2f\n", celsiusToFahrenheit(temp));
    } else if (choice == 2) {
        printf("Enter temperature in Fahrenheit: ");
        scanf("%f", &temp);
        printf("Temperature in Celsius: %.2f\n", fahrenheitToCelsius(temp));
    } else {
        printf("Invalid choice.\n");
    }

    return 0;
}

float celsiusToFahrenheit(float celsius) {
    return (celsius * 9 / 5) + 32;
}

float fahrenheitToCelsius(float fahrenheit) {
    return (fahrenheit - 32) * 5 / 9;
}
```


### . Simple To-Do List

This program allows users to add, remove, and view tasks in a to-do list using arrays and functions.

```c
#include <stdio.h>
#include <string.h>

#define MAX_TASKS 100
#define MAX_LENGTH 100

// Function prototypes
void addTask(char tasks[MAX_TASKS][MAX_LENGTH], int *taskCount);
void removeTask(char tasks[MAX_TASKS][MAX_LENGTH], int *taskCount);
void viewTasks(char tasks[MAX_TASKS][MAX_LENGTH], int taskCount);

int main() {
    char tasks[MAX_TASKS][MAX_LENGTH];
    int taskCount = 0;
    int choice;

    do {
        printf("To-Do List\n");
        printf("1. Add Task\n");
        printf("2. Remove Task\n");
        printf("3. View Tasks\n");
        printf("4. Exit\n");
        printf("Choose an option: ");
        scanf("%d", &choice);
        getchar(); // to consume the newline character after scanf

        switch (choice) {
            case 1:
                addTask(tasks, &taskCount);
                break;
            case 2:
                removeTask(tasks, &taskCount);
                break;
            case 3:
                viewTasks(tasks, taskCount);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}

void addTask(char tasks[MAX_TASKS][MAX_LENGTH], int *taskCount) {
    if (*taskCount < MAX_TASKS) {
        printf("Enter task: ");
        fgets(tasks[*taskCount], MAX_LENGTH, stdin);
        tasks[*taskCount][strcspn(tasks[*taskCount], "\n")] = '\0'; // Remove newline character
        (*taskCount)++;
        printf("Task added.\n");
    } else {
        printf("Task list is full.\n");
    }
}

void removeTask(char tasks[MAX_TASKS][MAX_LENGTH], int *taskCount) {
    int taskIndex;

    if (*taskCount > 0) {
        printf("Enter task number to remove: ");
        scanf("%d", &taskIndex);
        getchar(); // to consume the newline character after scanf

        if (taskIndex >= 1 && taskIndex <= *taskCount) {
            for (int i = taskIndex - 1; i < *taskCount - 1; i++) {
                strcpy(tasks[i], tasks[i + 1]);
            }
            (*taskCount)--;
            printf("Task removed.\n");
        } else {
            printf("Invalid task number.\n");
        }
    } else {
        printf("No tasks to remove.\n");
    }
}

void viewTasks(char tasks[MAX_TASKS][MAX_LENGTH], int taskCount) {
    if (taskCount > 0) {
        printf("Tasks:\n");
        for (int i = 0; i < taskCount; i++) {
            printf("%d. %s\n", i + 1, tasks[i]);
        }
    } else {
        printf("No tasks available.\n");
    }
}
```


### . Simple Tic-Tac-Toe Game

This program implements a basic console-based Tic-Tac-Toe game for two players.

```c
#include <stdio.h>

char board[3][3];
char currentPlayer;

void initializeBoard();
void printBoard();
int checkWin();
int checkDraw();
void switchPlayer();
void makeMove();

int main() {
    int gameStatus;

    initializeBoard();
    currentPlayer = 'X';

    printf("Welcome to Tic-Tac-Toe!\n");

    while (1) {
        printBoard();
        makeMove();
        gameStatus = checkWin();

        if (gameStatus == 1) {
            printBoard();
            printf("Player %c wins!\n", currentPlayer);
            break;
        } else if (checkDraw()) {
            printBoard();
            printf("It's a draw!\n");
            break;
        }

        switchPlayer();
    }

    return 0;
}

void initializeBoard() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}

void printBoard() {
    printf("  1 2 3\n");
    for (int i = 0; i < 3; i++) {
        printf("%d ", i + 1);
        for (int j = 0; j < 3; j++) {
            printf("%c", board[i][j]);
            if (j < 2) printf("|");
        }
        printf("\n");
        if (i < 2) printf("  -----\n");
    }
}

int checkWin() {
    // Check rows and columns
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) ||
            (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer)) {
            return 1;
        }
    }

    // Check diagonals
    if ((board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) ||
        (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer)) {
        return 1;
    }

    return 0;
}

int checkDraw() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return 0;
            }
        }
    }
    return 1;
}

void switchPlayer() {
    if (currentPlayer == 'X') {
        currentPlayer = 'O';
    } else {
        currentPlayer = 'X';
    }
}

void makeMove() {
    int row, col;

    printf("Player %c, enter your move (row and column): ", currentPlayer);
    scanf("%d %d", &row, &col);

    if (row >= 1 && row <= 3 && col >= 1 && col <= 3 && board[row - 1][col - 1] == ' ') {
        board[row - 1][col - 1] = currentPlayer;
    } else {
        printf("Invalid move. Try again.\n");
        makeMove();
    }
}
```

### Explanation:

- **Temperature Converter:**
  - Functions `celsiusToFahrenheit` and `fahrenheitToCelsius` handle the conversion between Celsius and Fahrenheit.
  - The main function lets the user choose the conversion direction and input the temperature.

- **Simple To-Do List:**
  - Uses an array of strings to store tasks.
  - Provides functions to add, remove, and view tasks, using user input and array manipulation.

- **Simple Tic-Tac-Toe Game:**
  - Initializes the game board and handles player moves.
  - Checks for a win or draw condition.
  - Uses loops and conditional statements to manage the game flow.

Feel free to modify and expand these examples as needed. If you have any questions or need further assistance, just let me know!